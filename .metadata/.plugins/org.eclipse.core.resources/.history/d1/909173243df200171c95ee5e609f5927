package data;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.fasterxml.jackson.databind.ObjectMapper;

import entities.Todo;
import entities.User;
@Repository
@Transactional
public class TodoDAOImpl implements TodoDAO {
	@PersistenceContext
	private EntityManager em;

	@Override
	public List<Todo> index(int uid) {
		String query = "SELECT DISTINCT t FROM Todo t WHERE t.user.id = :uid";
		return em.createQuery(query, Todo.class)
				.setParameter("uid", uid)
				.getResultList();
	}

	@Override
	public Todo show(int uid, int tid) {
		String query = "SELECT t FROM Todo t WHERE t.user.id = :uid AND t.id = :tid";
		Todo todo = em.find(Todo.class, tid);
		if( todo == null || todo.getUser().getId() != uid) {
			return null;
		}
		return em.createQuery(query, Todo.class)
				.setParameter("uid", uid)
				.setParameter("tid", tid)
				.getResultList()
				.get(0);
	}

	@Override
	public Todo create(int uid, String todoJson) {
		ObjectMapper mapper = new ObjectMapper();
		try {
			Todo newTodo = mapper.readValue(todoJson, Todo.class);
			newTodo.setUser(em.find(User.class, uid));
			em.persist(newTodo);
			em.flush();
			return newTodo;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public Todo update(int uid, int tid, String todoJson) {
		ObjectMapper mapper = new ObjectMapper();
		Todo dbTodo = em.find(Todo.class, tid);
		try {
			Todo tempTodo = mapper.readValue(todoJson, Todo.class);
			if (tempTodo.getTask() != null) {
				dbTodo.setTask(tempTodo.getTask());
			}
			em.persist(dbTodo);
			em.flush();
			return dbTodo;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public boolean destroy(int uid, int tid) {
		try {
			em.remove(em.find(Todo.class, tid));
			return true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

}
